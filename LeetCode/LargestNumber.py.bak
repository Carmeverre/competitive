# fails on input: [4704,6306,9385,7536,3462,4798,5422,5529,8070,6241,9094,7846,663,6221,216,6758,8353,3650,3836,8183,3516,5909,6744,1548,5712,2281,3664,7100,6698,7321,4980,8937,3163,5784,3298,9890,1090,7605,1380,1147,1495,3699,9448,5208,9456,3846,3567,6856,2000,3575,7205,2697,5972,7471,1763,1143,1417,6038,2313,6554,9026,8107,9827,7982,9685,3905,8939,1048,282,7423,6327,2970,4453,5460,3399,9533,914,3932,192,3084,6806,273,4283,2060,5682,2,2362,4812,7032,810,2465,6511,213,2362,3021,2745,3636,6265,1518,8398] - even though output appears identical to judge's expected output

# local optimization works here
# sort the numbers in decreasing order based first on the left-most digit, then on the 2nd from the left etc.
# shorter numbers should come before longer ones
# wait, that's not always true. It depends on whether the next digit is bigger than the next potential number...

from functools import cmp_to_key

def custom_compare(str1, str2):
    if str1 == str2:
        return 0
    for i in range(min(len(str1), len(str2))):
        if str1[i] < str2[i]:
            return -1
        elif str1[i] > str2[i]:
            return 1
    if len(str1) > len(str2):
        if str1[len(str2)] > str2[0]:
            return 1
        else:
            return -1
    else:
        if str2[len(str1)] > str1[0]:
            return -1
        else:
            return 1
        
        

class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        # extra conversion to int prevents leading "0"s etc.
        return str(int("".join(num for num in sorted((str(num) for num in nums), key=cmp_to_key(custom_compare), reverse=True))))
